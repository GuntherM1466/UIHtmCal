The UIHtmCal is a research application that allows easy experimentation of Numenta's Hierarchical Temporal Memory (HTM) algorithms using Usage Tracking from Windows Operating Systems as well as 
other test data. In this basic case user observation is DEACTIVATED. The provided code allows dealing with sample sentences that HTM algorithm shall learn. Its main intentions is to cross-check results with other releases.

The UIHtmCal runs a C# implementation of  HTM algorithm which is leaned on the implementation Barry Maturkanich. I strongly recommend to download his code which you also can find on github
https://github.com/binarybarry/HTM-Camera-Toolkit.git

On the Numenta forum: http://www.numenta.com/ you can find other excellent implementations as well.

Most important changes in this version are a more flexible temporal pooler algorithm and a new visualization based on 3d XNA and WPF.
The purpose of this project is to test how to make interpretable predictions with HTM. In order to use this project you should have visuals studio installed with NET-Framework of at least 3.5. Import the Project Solution UIHtmCal.sln in Visual Studio and run the program.


Project solution includes several sub-projects:
* HTMAnalytics: Mainly deals with stochastic processes and Log Displays for checking operations of HTM
* HTMBitMapProcessor: Takes in example data to convert to bitmaps
* HTMInterfaces: Relevant Interfaces
* HTMLibrary: Basic library of HTM technology (s. above)
* Transmute.WPF, Transmute.Windows: Integration of XNA into Wpf windows
* UIHtmCal: User Interface for testing the HTM


Additional background:

Numenta (www.numenta.com) is designing an exciting new technology based on models of the neocortex called "Hierarchical Temporal Memory".

Their most recent work on HTM, also called the "Cortical Learning Algorithms", is so far unreleased as a software project.  However they have published fairly detailed documentation as well as pseudo-code of how the overall algorithm works.

Numenta is currently allowing non-commerical experimentation by interested developers who wish to implement the ideas from the documention.  However, the algorithm is not free to use in any commericial or production setting.

If you are motivated enough, please also take a look at the code itself to review the details of my Region implementation. I gladly welcome any feedback or suggestions about how I am doing things or what I may be doing wrong.